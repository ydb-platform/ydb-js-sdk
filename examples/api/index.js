/**
 * YDB API Example
 *
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ gRPC API YDB:
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
 * - Discovery —Å–µ—Ä–≤–∏—Å (endpoint'—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
 * - Scheme —Å–µ—Ä–≤–∏—Å (–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞:
 * 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ YDB –∑–∞–ø—É—â–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start
 */

import { anyUnpack } from '@bufbuild/protobuf/wkt'
import { DiscoveryServiceDefinition, ListEndpointsResultSchema, WhoAmIResultSchema } from '@ydbjs/api/discovery'
import { ListDirectoryResultSchema, SchemeServiceDefinition } from '@ydbjs/api/scheme'
import { StaticCredentialsProvider } from '@ydbjs/auth/static'
import { Driver } from '@ydbjs/core'

let connectionString = process.env.YDB_CONNECTION_STRING || 'grpc://localhost:2136/local'

let driver = new Driver(connectionString, {
	credentialsProvider: new StaticCredentialsProvider({ username: 'root', password: '1234' }, connectionString),
})

console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YDB:', connectionString)

await driver.ready()
console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

let discovery = driver.createClient(DiscoveryServiceDefinition)

// –ü–æ–ª—É—á–∞–µ–º endpoint'—ã
console.log("\nüì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint'—ã:")
{
	let response = await discovery.listEndpoints({ database: driver.database })
	let endpoints = anyUnpack(response.operation.result, ListEndpointsResultSchema)

	console.log(`   –í—Å–µ–≥–æ: ${endpoints?.endpoints?.length || 0}`)
	endpoints?.endpoints?.forEach((endpoint, index) => {
		let ssl = endpoint?.ssl ? ' (SSL)' : ''
		console.log(`   ${index + 1}. ${endpoint?.address}:${endpoint?.port}${ssl}`)
	})
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
console.log('\nüÜî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:')
{
	let response = await discovery.whoAmI({})
	let whoAmI = anyUnpack(response.operation.result, WhoAmIResultSchema)

	console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${whoAmI?.user || '–∞–Ω–æ–Ω–∏–º–Ω—ã–π'}`)
	console.log(`   –ì—Ä—É–ø–ø—ã: ${whoAmI?.groups?.join(', ') || '–Ω–µ—Ç'}`)
}

// –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
{
	let scheme = driver.createClient(SchemeServiceDefinition)
	let response = await scheme.listDirectory({ path: driver.database })
	let directoryResult = anyUnpack(response.operation.result, ListDirectoryResultSchema)

	console.log(`   –ü—É—Ç—å: ${driver.database}`)
	console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${directoryResult?.self?.owner || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`)
	console.log(`   –û–±—ä–µ–∫—Ç–æ–≤: ${directoryResult?.children?.length || 0}`)

	if (directoryResult?.children) {
		let sortedChildren = [...directoryResult.children].sort((a, b) => (a?.name || '').localeCompare(b?.name || ''))

		sortedChildren.forEach((child, index) => {
			let name = child?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
			let isSystem = name.startsWith('.sys') ? ' üîß' : ''
			console.log(`   ${index + 1}. ${name} (—Ç–∏–ø: ${child?.type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})${isSystem}`)
		})
	}
}

driver.close()
console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!')
