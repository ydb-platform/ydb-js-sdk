/**
 * YDB Query Example
 *
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ YDB JavaScript SDK:
 * - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
 * - –†–∞–±–æ—Ç–∞ —Å JSON –¥–∞–Ω–Ω—ã–º–∏ (—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ JSON —Ñ—É–Ω–∫—Ü–∏–∏)
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞:
 * 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ YDB –∑–∞–ø—É—â–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ
 * 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é YDB_CONNECTION_STRING (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start
 * 4. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: npm run dev
 */

import { Driver } from '@ydbjs/core'
import { query } from '@ydbjs/query'
import { Json, Timestamp, Uint64 } from '@ydbjs/value/primitive'

let connectionString = process.env.YDB_CONNECTION_STRING || 'grpc://localhost:2136/local'
let driver = new Driver(connectionString)
let sql = query(driver)

await driver.ready()

try {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
	await sql`CREATE TABLE IF NOT EXISTS test_table (
		id Uint64,
		title Text,
		content Text,
		created_at Timestamp,
		metadata Json,
		PRIMARY KEY (id)
	)`

	console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞')

	// –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	await sql`DELETE FROM test_table`
	console.log('üóëÔ∏è  –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞')

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º YDB –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ)
	let ydbData = [
		{
			id: new Uint64(1n),
			title: '–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å', // string –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç Text
			content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏',
			created_at: new Timestamp(new Date()),
			metadata: new Json(JSON.stringify({ tags: ['example', 'test'] })),
		},
		{
			id: new Uint64(2n),
			title: '–í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å',
			content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏',
			created_at: new Timestamp(new Date()),
			metadata: new Json(JSON.stringify({ tags: ['example'], priority: 'high' })),
		},
		{
			id: new Uint64(3n),
			title: '–¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å',
			content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–ø–∏—Å–∏',
			created_at: new Timestamp(new Date()),
			metadata: new Json(JSON.stringify({ tags: ['test'], priority: 'low' })),
		},
	]

	// –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	let insertQuery = sql`INSERT INTO test_table SELECT * FROM AS_TABLE(${ydbData})`

	// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	console.log('üîç SQL —Ç–µ–∫—Å—Ç:', insertQuery.text)
	console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', Object.keys(insertQuery.parameters))
	console.log(
		'üîç –¢–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:',
		Object.entries(insertQuery.parameters).map(([key, value]) => [
			key,
			value.constructor.name,
			value.type?.constructor.name,
		])
	)

	await insertQuery

	console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã')

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
	let searchId = 2n
	let [[foundRecord]] = await sql`
		SELECT id, title, content, metadata
		FROM test_table
		WHERE id = ${searchId}`

	console.log('üîç –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:', foundRecord)

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	let [[countResult]] = await sql`SELECT COUNT(*) as total FROM test_table`
	console.log('üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', countResult.total)

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π JSON –∑–∞–ø—Ä–æ—Å)
	let recordsWithTag = await sql`
		SELECT id, title
		FROM test_table
		WHERE JSON_EXISTS(metadata, "$.tags[*]")`

	console.log('üè∑Ô∏è  –ó–∞–ø–∏—Å–∏ —Å —Ç–µ–≥–∞–º–∏:', recordsWithTag[0])

	console.log('‚úÖ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!')
} catch (error) {
	console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
	console.error('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:')
	console.error(JSON.stringify(error.issues, null, 2))
	throw error
} finally {
	// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
	driver.close()
	console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
}
