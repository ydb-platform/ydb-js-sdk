// @generated by protoc-gen-nice-grpc v1 with parameter "target=ts,import_extension=js"
// @generated from file ydb_export_v1.proto (package Ydb.Export.V1, syntax proto3)
/* eslint-disable */

import type { MessageInitShape } from "@bufbuild/protobuf";
import { create, fromBinary, toBinary } from "@bufbuild/protobuf";
import { ExportToS3RequestSchema, ExportToS3ResponseSchema, ExportToYtRequestSchema, ExportToYtResponseSchema } from "./protos/ydb_export_pb.js";
import type { ServiceDefinition } from "nice-grpc";

/**
 * @generated from service Ydb.Export.V1.ExportService
 */
export const ExportServiceDefinition = {
  /**
   * Exports data to YT.
   * Method starts an asynchronous operation that can be cancelled while it is in progress.
   *
   * @generated from rpc Ydb.Export.V1.ExportService.ExportToYt
   */
  exportToYt: {
    path: "/Ydb.Export.V1.ExportService/ExportToYt",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ExportToYtRequestSchema>) => toBinary(ExportToYtRequestSchema, create(ExportToYtRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ExportToYtRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ExportToYtResponseSchema>) => toBinary(ExportToYtResponseSchema, create(ExportToYtResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ExportToYtResponseSchema,bytes),
    options: {},
  },
  /**
   * Exports data to S3.
   * Method starts an asynchronous operation that can be cancelled while it is in progress.
   *
   * @generated from rpc Ydb.Export.V1.ExportService.ExportToS3
   */
  exportToS3: {
    path: "/Ydb.Export.V1.ExportService/ExportToS3",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ExportToS3RequestSchema>) => toBinary(ExportToS3RequestSchema, create(ExportToS3RequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ExportToS3RequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ExportToS3ResponseSchema>) => toBinary(ExportToS3ResponseSchema, create(ExportToS3ResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ExportToS3ResponseSchema,bytes),
    options: {},
  },
} as const satisfies ServiceDefinition
