// @generated by protoc-gen-nice-grpc v1 with parameter "target=ts,import_extension=js"
// @generated from file ydb_coordination_v1.proto (package Ydb.Coordination.V1, syntax proto3)
/* eslint-disable */

import type { MessageInitShape } from "@bufbuild/protobuf";
import { create, fromBinary, toBinary } from "@bufbuild/protobuf";
import { AlterNodeRequestSchema, AlterNodeResponseSchema, CreateNodeRequestSchema, CreateNodeResponseSchema, DescribeNodeRequestSchema, DescribeNodeResponseSchema, DropNodeRequestSchema, DropNodeResponseSchema, SessionRequestSchema, SessionResponseSchema } from "./protos/ydb_coordination_pb.js";
import type { ServiceDefinition } from "nice-grpc";

/**
 * @generated from service Ydb.Coordination.V1.CoordinationService
 */
export const CoordinationServiceDefinition = {
  /**
   * *
   * Bidirectional stream used to establish a session with a coordination node
   *
   * Relevant APIs for managing semaphores, distributed locking, creating or
   * restoring a previously established session are described using nested
   * messages in SessionRequest and SessionResponse. Session is established
   * with a specific coordination node (previously created using CreateNode
   * below) and semaphores are local to that coordination node.
   *
   * @generated from rpc Ydb.Coordination.V1.CoordinationService.Session
   */
  session: {
    path: "/Ydb.Coordination.V1.CoordinationService/Session",
    requestStream: true,
    requestSerialize: (message: MessageInitShape<typeof SessionRequestSchema>) => toBinary(SessionRequestSchema, create(SessionRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(SessionRequestSchema,bytes),
      responseStream: true, 
    responseSerialize: (message: MessageInitShape<typeof SessionResponseSchema>) => toBinary(SessionResponseSchema, create(SessionResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(SessionResponseSchema,bytes),
    options: {},
  },
  /**
   * Creates a new coordination node
   *
   * @generated from rpc Ydb.Coordination.V1.CoordinationService.CreateNode
   */
  createNode: {
    path: "/Ydb.Coordination.V1.CoordinationService/CreateNode",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CreateNodeRequestSchema>) => toBinary(CreateNodeRequestSchema, create(CreateNodeRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CreateNodeRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CreateNodeResponseSchema>) => toBinary(CreateNodeResponseSchema, create(CreateNodeResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CreateNodeResponseSchema,bytes),
    options: {},
  },
  /**
   * Modifies settings of a coordination node
   *
   * @generated from rpc Ydb.Coordination.V1.CoordinationService.AlterNode
   */
  alterNode: {
    path: "/Ydb.Coordination.V1.CoordinationService/AlterNode",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof AlterNodeRequestSchema>) => toBinary(AlterNodeRequestSchema, create(AlterNodeRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(AlterNodeRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof AlterNodeResponseSchema>) => toBinary(AlterNodeResponseSchema, create(AlterNodeResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(AlterNodeResponseSchema,bytes),
    options: {},
  },
  /**
   * Drops a coordination node
   *
   * @generated from rpc Ydb.Coordination.V1.CoordinationService.DropNode
   */
  dropNode: {
    path: "/Ydb.Coordination.V1.CoordinationService/DropNode",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof DropNodeRequestSchema>) => toBinary(DropNodeRequestSchema, create(DropNodeRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(DropNodeRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof DropNodeResponseSchema>) => toBinary(DropNodeResponseSchema, create(DropNodeResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(DropNodeResponseSchema,bytes),
    options: {},
  },
  /**
   * Describes a coordination node
   *
   * @generated from rpc Ydb.Coordination.V1.CoordinationService.DescribeNode
   */
  describeNode: {
    path: "/Ydb.Coordination.V1.CoordinationService/DescribeNode",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof DescribeNodeRequestSchema>) => toBinary(DescribeNodeRequestSchema, create(DescribeNodeRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(DescribeNodeRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof DescribeNodeResponseSchema>) => toBinary(DescribeNodeResponseSchema, create(DescribeNodeResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(DescribeNodeResponseSchema,bytes),
    options: {},
  },
} as const satisfies ServiceDefinition
//@ts-expect-error
CoordinationServiceDefinition["name"] = "CoordinationService";
//@ts-expect-error
CoordinationServiceDefinition["fullName"] = "Ydb.Coordination.V1.CoordinationService";
