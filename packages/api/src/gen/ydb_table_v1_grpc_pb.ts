// @generated by protoc-gen-nice-grpc v1 with parameter "target=ts,import_extension=js"
// @generated from file ydb_table_v1.proto (package Ydb.Table.V1, syntax proto3)
/* eslint-disable */

import type { MessageInitShape } from "@bufbuild/protobuf";
import { create, fromBinary, toBinary } from "@bufbuild/protobuf";
import { AlterTableRequestSchema, AlterTableResponseSchema, BeginTransactionRequestSchema, BeginTransactionResponseSchema, BulkUpsertRequestSchema, BulkUpsertResponseSchema, CommitTransactionRequestSchema, CommitTransactionResponseSchema, CopyTableRequestSchema, CopyTableResponseSchema, CopyTablesRequestSchema, CopyTablesResponseSchema, CreateSessionRequestSchema, CreateSessionResponseSchema, CreateTableRequestSchema, CreateTableResponseSchema, DeleteSessionRequestSchema, DeleteSessionResponseSchema, DescribeTableOptionsRequestSchema, DescribeTableOptionsResponseSchema, DescribeTableRequestSchema, DescribeTableResponseSchema, DropTableRequestSchema, DropTableResponseSchema, ExecuteDataQueryRequestSchema, ExecuteDataQueryResponseSchema, ExecuteScanQueryPartialResponseSchema, ExecuteScanQueryRequestSchema, ExecuteSchemeQueryRequestSchema, ExecuteSchemeQueryResponseSchema, ExplainDataQueryRequestSchema, ExplainDataQueryResponseSchema, KeepAliveRequestSchema, KeepAliveResponseSchema, PrepareDataQueryRequestSchema, PrepareDataQueryResponseSchema, ReadRowsRequestSchema, ReadRowsResponseSchema, ReadTableRequestSchema, ReadTableResponseSchema, RenameTablesRequestSchema, RenameTablesResponseSchema, RollbackTransactionRequestSchema, RollbackTransactionResponseSchema } from "./protos/ydb_table_pb.js";
import type { ServiceDefinition } from "nice-grpc";

/**
 * @generated from service Ydb.Table.V1.TableService
 */
export const TableServiceDefinition = {
  /**
   * Create new session. Implicit session creation is forbidden,
   * so user must create new session before execute any query,
   * otherwise BAD_SESSION status will be returned.
   * Simultaneous execution of requests are forbiden.
   * Sessions are volatile, can be invalidated by server, for example in case
   * of fatal errors. All requests with this session will fail with BAD_SESSION status.
   * So, client must be able to handle BAD_SESSION status.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CreateSession
   */
  createSession: {
    path: "/Ydb.Table.V1.TableService/CreateSession",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CreateSessionRequestSchema>) => toBinary(CreateSessionRequestSchema, create(CreateSessionRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CreateSessionRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CreateSessionResponseSchema>) => toBinary(CreateSessionResponseSchema, create(CreateSessionResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CreateSessionResponseSchema,bytes),
    options: {},
  },
  /**
   * Ends a session, releasing server resources associated with it.
   *
   * @generated from rpc Ydb.Table.V1.TableService.DeleteSession
   */
  deleteSession: {
    path: "/Ydb.Table.V1.TableService/DeleteSession",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof DeleteSessionRequestSchema>) => toBinary(DeleteSessionRequestSchema, create(DeleteSessionRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(DeleteSessionRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof DeleteSessionResponseSchema>) => toBinary(DeleteSessionResponseSchema, create(DeleteSessionResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(DeleteSessionResponseSchema,bytes),
    options: {},
  },
  /**
   * Idle sessions can be kept alive by calling KeepAlive periodically.
   *
   * @generated from rpc Ydb.Table.V1.TableService.KeepAlive
   */
  keepAlive: {
    path: "/Ydb.Table.V1.TableService/KeepAlive",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof KeepAliveRequestSchema>) => toBinary(KeepAliveRequestSchema, create(KeepAliveRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(KeepAliveRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof KeepAliveResponseSchema>) => toBinary(KeepAliveResponseSchema, create(KeepAliveResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(KeepAliveResponseSchema,bytes),
    options: {},
  },
  /**
   * Creates new table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CreateTable
   */
  createTable: {
    path: "/Ydb.Table.V1.TableService/CreateTable",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CreateTableRequestSchema>) => toBinary(CreateTableRequestSchema, create(CreateTableRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CreateTableRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CreateTableResponseSchema>) => toBinary(CreateTableResponseSchema, create(CreateTableResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CreateTableResponseSchema,bytes),
    options: {},
  },
  /**
   * Drop table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.DropTable
   */
  dropTable: {
    path: "/Ydb.Table.V1.TableService/DropTable",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof DropTableRequestSchema>) => toBinary(DropTableRequestSchema, create(DropTableRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(DropTableRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof DropTableResponseSchema>) => toBinary(DropTableResponseSchema, create(DropTableResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(DropTableResponseSchema,bytes),
    options: {},
  },
  /**
   * Modifies schema of given table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.AlterTable
   */
  alterTable: {
    path: "/Ydb.Table.V1.TableService/AlterTable",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof AlterTableRequestSchema>) => toBinary(AlterTableRequestSchema, create(AlterTableRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(AlterTableRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof AlterTableResponseSchema>) => toBinary(AlterTableResponseSchema, create(AlterTableResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(AlterTableResponseSchema,bytes),
    options: {},
  },
  /**
   * Creates copy of given table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CopyTable
   */
  copyTable: {
    path: "/Ydb.Table.V1.TableService/CopyTable",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CopyTableRequestSchema>) => toBinary(CopyTableRequestSchema, create(CopyTableRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CopyTableRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CopyTableResponseSchema>) => toBinary(CopyTableResponseSchema, create(CopyTableResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CopyTableResponseSchema,bytes),
    options: {},
  },
  /**
   * Creates consistent copy of given tables.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CopyTables
   */
  copyTables: {
    path: "/Ydb.Table.V1.TableService/CopyTables",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CopyTablesRequestSchema>) => toBinary(CopyTablesRequestSchema, create(CopyTablesRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CopyTablesRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CopyTablesResponseSchema>) => toBinary(CopyTablesResponseSchema, create(CopyTablesResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CopyTablesResponseSchema,bytes),
    options: {},
  },
  /**
   * Creates consistent move of given tables.
   *
   * @generated from rpc Ydb.Table.V1.TableService.RenameTables
   */
  renameTables: {
    path: "/Ydb.Table.V1.TableService/RenameTables",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof RenameTablesRequestSchema>) => toBinary(RenameTablesRequestSchema, create(RenameTablesRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(RenameTablesRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof RenameTablesResponseSchema>) => toBinary(RenameTablesResponseSchema, create(RenameTablesResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(RenameTablesResponseSchema,bytes),
    options: {},
  },
  /**
   * Returns information about given table (metadata).
   *
   * @generated from rpc Ydb.Table.V1.TableService.DescribeTable
   */
  describeTable: {
    path: "/Ydb.Table.V1.TableService/DescribeTable",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof DescribeTableRequestSchema>) => toBinary(DescribeTableRequestSchema, create(DescribeTableRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(DescribeTableRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof DescribeTableResponseSchema>) => toBinary(DescribeTableResponseSchema, create(DescribeTableResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(DescribeTableResponseSchema,bytes),
    options: {},
  },
  /**
   * Explains data query.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.ExplainDataQuery
   */
  explainDataQuery: {
    path: "/Ydb.Table.V1.TableService/ExplainDataQuery",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ExplainDataQueryRequestSchema>) => toBinary(ExplainDataQueryRequestSchema, create(ExplainDataQueryRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ExplainDataQueryRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ExplainDataQueryResponseSchema>) => toBinary(ExplainDataQueryResponseSchema, create(ExplainDataQueryResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ExplainDataQueryResponseSchema,bytes),
    options: {},
  },
  /**
   * Prepares data query, returns query id.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.PrepareDataQuery
   */
  prepareDataQuery: {
    path: "/Ydb.Table.V1.TableService/PrepareDataQuery",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof PrepareDataQueryRequestSchema>) => toBinary(PrepareDataQueryRequestSchema, create(PrepareDataQueryRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(PrepareDataQueryRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof PrepareDataQueryResponseSchema>) => toBinary(PrepareDataQueryResponseSchema, create(PrepareDataQueryResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(PrepareDataQueryResponseSchema,bytes),
    options: {},
  },
  /**
   * Executes data query.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.ExecuteDataQuery
   */
  executeDataQuery: {
    path: "/Ydb.Table.V1.TableService/ExecuteDataQuery",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ExecuteDataQueryRequestSchema>) => toBinary(ExecuteDataQueryRequestSchema, create(ExecuteDataQueryRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ExecuteDataQueryRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ExecuteDataQueryResponseSchema>) => toBinary(ExecuteDataQueryResponseSchema, create(ExecuteDataQueryResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ExecuteDataQueryResponseSchema,bytes),
    options: {},
  },
  /**
   * Executes scheme query.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.ExecuteSchemeQuery
   */
  executeSchemeQuery: {
    path: "/Ydb.Table.V1.TableService/ExecuteSchemeQuery",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ExecuteSchemeQueryRequestSchema>) => toBinary(ExecuteSchemeQueryRequestSchema, create(ExecuteSchemeQueryRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ExecuteSchemeQueryRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ExecuteSchemeQueryResponseSchema>) => toBinary(ExecuteSchemeQueryResponseSchema, create(ExecuteSchemeQueryResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ExecuteSchemeQueryResponseSchema,bytes),
    options: {},
  },
  /**
   * Begins new transaction.
   *
   * @generated from rpc Ydb.Table.V1.TableService.BeginTransaction
   */
  beginTransaction: {
    path: "/Ydb.Table.V1.TableService/BeginTransaction",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof BeginTransactionRequestSchema>) => toBinary(BeginTransactionRequestSchema, create(BeginTransactionRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(BeginTransactionRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof BeginTransactionResponseSchema>) => toBinary(BeginTransactionResponseSchema, create(BeginTransactionResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(BeginTransactionResponseSchema,bytes),
    options: {},
  },
  /**
   * Commits specified active transaction.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CommitTransaction
   */
  commitTransaction: {
    path: "/Ydb.Table.V1.TableService/CommitTransaction",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CommitTransactionRequestSchema>) => toBinary(CommitTransactionRequestSchema, create(CommitTransactionRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CommitTransactionRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CommitTransactionResponseSchema>) => toBinary(CommitTransactionResponseSchema, create(CommitTransactionResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CommitTransactionResponseSchema,bytes),
    options: {},
  },
  /**
   * Performs a rollback of the specified active transaction.
   *
   * @generated from rpc Ydb.Table.V1.TableService.RollbackTransaction
   */
  rollbackTransaction: {
    path: "/Ydb.Table.V1.TableService/RollbackTransaction",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof RollbackTransactionRequestSchema>) => toBinary(RollbackTransactionRequestSchema, create(RollbackTransactionRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(RollbackTransactionRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof RollbackTransactionResponseSchema>) => toBinary(RollbackTransactionResponseSchema, create(RollbackTransactionResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(RollbackTransactionResponseSchema,bytes),
    options: {},
  },
  /**
   * Describe supported table options.
   *
   * @generated from rpc Ydb.Table.V1.TableService.DescribeTableOptions
   */
  describeTableOptions: {
    path: "/Ydb.Table.V1.TableService/DescribeTableOptions",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof DescribeTableOptionsRequestSchema>) => toBinary(DescribeTableOptionsRequestSchema, create(DescribeTableOptionsRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(DescribeTableOptionsRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof DescribeTableOptionsResponseSchema>) => toBinary(DescribeTableOptionsResponseSchema, create(DescribeTableOptionsResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(DescribeTableOptionsResponseSchema,bytes),
    options: {},
  },
  /**
   * Streaming read table
   *
   * @generated from rpc Ydb.Table.V1.TableService.StreamReadTable
   */
  streamReadTable: {
    path: "/Ydb.Table.V1.TableService/StreamReadTable",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ReadTableRequestSchema>) => toBinary(ReadTableRequestSchema, create(ReadTableRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ReadTableRequestSchema,bytes),
      responseStream: true, 
    responseSerialize: (message: MessageInitShape<typeof ReadTableResponseSchema>) => toBinary(ReadTableResponseSchema, create(ReadTableResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ReadTableResponseSchema,bytes),
    options: {},
  },
  /**
   * Reads specified keys non-transactionally from a single table
   *
   * @generated from rpc Ydb.Table.V1.TableService.ReadRows
   */
  readRows: {
    path: "/Ydb.Table.V1.TableService/ReadRows",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ReadRowsRequestSchema>) => toBinary(ReadRowsRequestSchema, create(ReadRowsRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ReadRowsRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ReadRowsResponseSchema>) => toBinary(ReadRowsResponseSchema, create(ReadRowsResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ReadRowsResponseSchema,bytes),
    options: {},
  },
  /**
   * Upserts a batch of rows non-transactionally.
   * Returns success only when all rows were successfully upserted. In case of an error some rows might
   * be upserted and some might not.
   *
   * @generated from rpc Ydb.Table.V1.TableService.BulkUpsert
   */
  bulkUpsert: {
    path: "/Ydb.Table.V1.TableService/BulkUpsert",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof BulkUpsertRequestSchema>) => toBinary(BulkUpsertRequestSchema, create(BulkUpsertRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(BulkUpsertRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof BulkUpsertResponseSchema>) => toBinary(BulkUpsertResponseSchema, create(BulkUpsertResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(BulkUpsertResponseSchema,bytes),
    options: {},
  },
  /**
   * Executes scan query with streaming result.
   *
   * @generated from rpc Ydb.Table.V1.TableService.StreamExecuteScanQuery
   */
  streamExecuteScanQuery: {
    path: "/Ydb.Table.V1.TableService/StreamExecuteScanQuery",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ExecuteScanQueryRequestSchema>) => toBinary(ExecuteScanQueryRequestSchema, create(ExecuteScanQueryRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ExecuteScanQueryRequestSchema,bytes),
      responseStream: true, 
    responseSerialize: (message: MessageInitShape<typeof ExecuteScanQueryPartialResponseSchema>) => toBinary(ExecuteScanQueryPartialResponseSchema, create(ExecuteScanQueryPartialResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ExecuteScanQueryPartialResponseSchema,bytes),
    options: {},
  },
} as const satisfies ServiceDefinition
//@ts-expect-error
TableServiceDefinition["name"] = "TableService";
//@ts-expect-error
TableServiceDefinition["fullName"] = "Ydb.Table.V1.TableService";
