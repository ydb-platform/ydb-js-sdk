// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,import_extension=js"
// @generated from file ydb_table_v1.proto (package Ydb.Table.V1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AlterTableRequestSchema, AlterTableResponseSchema, BeginTransactionRequestSchema, BeginTransactionResponseSchema, BulkUpsertRequestSchema, BulkUpsertResponseSchema, CommitTransactionRequestSchema, CommitTransactionResponseSchema, CopyTableRequestSchema, CopyTableResponseSchema, CopyTablesRequestSchema, CopyTablesResponseSchema, CreateSessionRequestSchema, CreateSessionResponseSchema, CreateTableRequestSchema, CreateTableResponseSchema, DeleteSessionRequestSchema, DeleteSessionResponseSchema, DescribeTableOptionsRequestSchema, DescribeTableOptionsResponseSchema, DescribeTableRequestSchema, DescribeTableResponseSchema, DropTableRequestSchema, DropTableResponseSchema, ExecuteDataQueryRequestSchema, ExecuteDataQueryResponseSchema, ExecuteScanQueryPartialResponseSchema, ExecuteScanQueryRequestSchema, ExecuteSchemeQueryRequestSchema, ExecuteSchemeQueryResponseSchema, ExplainDataQueryRequestSchema, ExplainDataQueryResponseSchema, KeepAliveRequestSchema, KeepAliveResponseSchema, PrepareDataQueryRequestSchema, PrepareDataQueryResponseSchema, ReadRowsRequestSchema, ReadRowsResponseSchema, ReadTableRequestSchema, ReadTableResponseSchema, RenameTablesRequestSchema, RenameTablesResponseSchema, RollbackTransactionRequestSchema, RollbackTransactionResponseSchema } from "./protos/ydb_table_pb.js";
import { file_protos_ydb_table } from "./protos/ydb_table_pb.js";

/**
 * Describes the file ydb_table_v1.proto.
 */
export const file_ydb_table_v1: GenFile = /*@__PURE__*/
  fileDesc("ChJ5ZGJfdGFibGVfdjEucHJvdG8SDFlkYi5UYWJsZS5WMTLpDgoMVGFibGVTZXJ2aWNlElIKDUNyZWF0ZVNlc3Npb24SHy5ZZGIuVGFibGUuQ3JlYXRlU2Vzc2lvblJlcXVlc3QaIC5ZZGIuVGFibGUuQ3JlYXRlU2Vzc2lvblJlc3BvbnNlElIKDURlbGV0ZVNlc3Npb24SHy5ZZGIuVGFibGUuRGVsZXRlU2Vzc2lvblJlcXVlc3QaIC5ZZGIuVGFibGUuRGVsZXRlU2Vzc2lvblJlc3BvbnNlEkYKCUtlZXBBbGl2ZRIbLllkYi5UYWJsZS5LZWVwQWxpdmVSZXF1ZXN0GhwuWWRiLlRhYmxlLktlZXBBbGl2ZVJlc3BvbnNlEkwKC0NyZWF0ZVRhYmxlEh0uWWRiLlRhYmxlLkNyZWF0ZVRhYmxlUmVxdWVzdBoeLllkYi5UYWJsZS5DcmVhdGVUYWJsZVJlc3BvbnNlEkYKCURyb3BUYWJsZRIbLllkYi5UYWJsZS5Ecm9wVGFibGVSZXF1ZXN0GhwuWWRiLlRhYmxlLkRyb3BUYWJsZVJlc3BvbnNlEkkKCkFsdGVyVGFibGUSHC5ZZGIuVGFibGUuQWx0ZXJUYWJsZVJlcXVlc3QaHS5ZZGIuVGFibGUuQWx0ZXJUYWJsZVJlc3BvbnNlEkYKCUNvcHlUYWJsZRIbLllkYi5UYWJsZS5Db3B5VGFibGVSZXF1ZXN0GhwuWWRiLlRhYmxlLkNvcHlUYWJsZVJlc3BvbnNlEkkKCkNvcHlUYWJsZXMSHC5ZZGIuVGFibGUuQ29weVRhYmxlc1JlcXVlc3QaHS5ZZGIuVGFibGUuQ29weVRhYmxlc1Jlc3BvbnNlEk8KDFJlbmFtZVRhYmxlcxIeLllkYi5UYWJsZS5SZW5hbWVUYWJsZXNSZXF1ZXN0Gh8uWWRiLlRhYmxlLlJlbmFtZVRhYmxlc1Jlc3BvbnNlElIKDURlc2NyaWJlVGFibGUSHy5ZZGIuVGFibGUuRGVzY3JpYmVUYWJsZVJlcXVlc3QaIC5ZZGIuVGFibGUuRGVzY3JpYmVUYWJsZVJlc3BvbnNlElsKEEV4cGxhaW5EYXRhUXVlcnkSIi5ZZGIuVGFibGUuRXhwbGFpbkRhdGFRdWVyeVJlcXVlc3QaIy5ZZGIuVGFibGUuRXhwbGFpbkRhdGFRdWVyeVJlc3BvbnNlElsKEFByZXBhcmVEYXRhUXVlcnkSIi5ZZGIuVGFibGUuUHJlcGFyZURhdGFRdWVyeVJlcXVlc3QaIy5ZZGIuVGFibGUuUHJlcGFyZURhdGFRdWVyeVJlc3BvbnNlElsKEEV4ZWN1dGVEYXRhUXVlcnkSIi5ZZGIuVGFibGUuRXhlY3V0ZURhdGFRdWVyeVJlcXVlc3QaIy5ZZGIuVGFibGUuRXhlY3V0ZURhdGFRdWVyeVJlc3BvbnNlEmEKEkV4ZWN1dGVTY2hlbWVRdWVyeRIkLllkYi5UYWJsZS5FeGVjdXRlU2NoZW1lUXVlcnlSZXF1ZXN0GiUuWWRiLlRhYmxlLkV4ZWN1dGVTY2hlbWVRdWVyeVJlc3BvbnNlElsKEEJlZ2luVHJhbnNhY3Rpb24SIi5ZZGIuVGFibGUuQmVnaW5UcmFuc2FjdGlvblJlcXVlc3QaIy5ZZGIuVGFibGUuQmVnaW5UcmFuc2FjdGlvblJlc3BvbnNlEl4KEUNvbW1pdFRyYW5zYWN0aW9uEiMuWWRiLlRhYmxlLkNvbW1pdFRyYW5zYWN0aW9uUmVxdWVzdBokLllkYi5UYWJsZS5Db21taXRUcmFuc2FjdGlvblJlc3BvbnNlEmQKE1JvbGxiYWNrVHJhbnNhY3Rpb24SJS5ZZGIuVGFibGUuUm9sbGJhY2tUcmFuc2FjdGlvblJlcXVlc3QaJi5ZZGIuVGFibGUuUm9sbGJhY2tUcmFuc2FjdGlvblJlc3BvbnNlEmcKFERlc2NyaWJlVGFibGVPcHRpb25zEiYuWWRiLlRhYmxlLkRlc2NyaWJlVGFibGVPcHRpb25zUmVxdWVzdBonLllkYi5UYWJsZS5EZXNjcmliZVRhYmxlT3B0aW9uc1Jlc3BvbnNlEk4KD1N0cmVhbVJlYWRUYWJsZRIbLllkYi5UYWJsZS5SZWFkVGFibGVSZXF1ZXN0GhwuWWRiLlRhYmxlLlJlYWRUYWJsZVJlc3BvbnNlMAESQwoIUmVhZFJvd3MSGi5ZZGIuVGFibGUuUmVhZFJvd3NSZXF1ZXN0GhsuWWRiLlRhYmxlLlJlYWRSb3dzUmVzcG9uc2USSQoKQnVsa1Vwc2VydBIcLllkYi5UYWJsZS5CdWxrVXBzZXJ0UmVxdWVzdBodLllkYi5UYWJsZS5CdWxrVXBzZXJ0UmVzcG9uc2USagoWU3RyZWFtRXhlY3V0ZVNjYW5RdWVyeRIiLllkYi5UYWJsZS5FeGVjdXRlU2NhblF1ZXJ5UmVxdWVzdBoqLllkYi5UYWJsZS5FeGVjdXRlU2NhblF1ZXJ5UGFydGlhbFJlc3BvbnNlMAFCTwoXdGVjaC55ZGIucHJvdG8udGFibGUudjFaNGdpdGh1Yi5jb20veWRiLXBsYXRmb3JtL3lkYi1nby1nZW5wcm90by9ZZGJfVGFibGVfVjFiBnByb3RvMw", [file_protos_ydb_table]);

/**
 * @generated from service Ydb.Table.V1.TableService
 */
export const TableService: GenService<{
  /**
   * Create new session. Implicit session creation is forbidden,
   * so user must create new session before execute any query,
   * otherwise BAD_SESSION status will be returned.
   * Simultaneous execution of requests are forbiden.
   * Sessions are volatile, can be invalidated by server, for example in case
   * of fatal errors. All requests with this session will fail with BAD_SESSION status.
   * So, client must be able to handle BAD_SESSION status.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CreateSession
   */
  createSession: {
    methodKind: "unary";
    input: typeof CreateSessionRequestSchema;
    output: typeof CreateSessionResponseSchema;
  },
  /**
   * Ends a session, releasing server resources associated with it.
   *
   * @generated from rpc Ydb.Table.V1.TableService.DeleteSession
   */
  deleteSession: {
    methodKind: "unary";
    input: typeof DeleteSessionRequestSchema;
    output: typeof DeleteSessionResponseSchema;
  },
  /**
   * Idle sessions can be kept alive by calling KeepAlive periodically.
   *
   * @generated from rpc Ydb.Table.V1.TableService.KeepAlive
   */
  keepAlive: {
    methodKind: "unary";
    input: typeof KeepAliveRequestSchema;
    output: typeof KeepAliveResponseSchema;
  },
  /**
   * Creates new table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CreateTable
   */
  createTable: {
    methodKind: "unary";
    input: typeof CreateTableRequestSchema;
    output: typeof CreateTableResponseSchema;
  },
  /**
   * Drop table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.DropTable
   */
  dropTable: {
    methodKind: "unary";
    input: typeof DropTableRequestSchema;
    output: typeof DropTableResponseSchema;
  },
  /**
   * Modifies schema of given table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.AlterTable
   */
  alterTable: {
    methodKind: "unary";
    input: typeof AlterTableRequestSchema;
    output: typeof AlterTableResponseSchema;
  },
  /**
   * Creates copy of given table.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CopyTable
   */
  copyTable: {
    methodKind: "unary";
    input: typeof CopyTableRequestSchema;
    output: typeof CopyTableResponseSchema;
  },
  /**
   * Creates consistent copy of given tables.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CopyTables
   */
  copyTables: {
    methodKind: "unary";
    input: typeof CopyTablesRequestSchema;
    output: typeof CopyTablesResponseSchema;
  },
  /**
   * Creates consistent move of given tables.
   *
   * @generated from rpc Ydb.Table.V1.TableService.RenameTables
   */
  renameTables: {
    methodKind: "unary";
    input: typeof RenameTablesRequestSchema;
    output: typeof RenameTablesResponseSchema;
  },
  /**
   * Returns information about given table (metadata).
   *
   * @generated from rpc Ydb.Table.V1.TableService.DescribeTable
   */
  describeTable: {
    methodKind: "unary";
    input: typeof DescribeTableRequestSchema;
    output: typeof DescribeTableResponseSchema;
  },
  /**
   * Explains data query.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.ExplainDataQuery
   */
  explainDataQuery: {
    methodKind: "unary";
    input: typeof ExplainDataQueryRequestSchema;
    output: typeof ExplainDataQueryResponseSchema;
  },
  /**
   * Prepares data query, returns query id.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.PrepareDataQuery
   */
  prepareDataQuery: {
    methodKind: "unary";
    input: typeof PrepareDataQueryRequestSchema;
    output: typeof PrepareDataQueryResponseSchema;
  },
  /**
   * Executes data query.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.ExecuteDataQuery
   */
  executeDataQuery: {
    methodKind: "unary";
    input: typeof ExecuteDataQueryRequestSchema;
    output: typeof ExecuteDataQueryResponseSchema;
  },
  /**
   * Executes scheme query.
   * SessionId of previously created session must be provided.
   *
   * @generated from rpc Ydb.Table.V1.TableService.ExecuteSchemeQuery
   */
  executeSchemeQuery: {
    methodKind: "unary";
    input: typeof ExecuteSchemeQueryRequestSchema;
    output: typeof ExecuteSchemeQueryResponseSchema;
  },
  /**
   * Begins new transaction.
   *
   * @generated from rpc Ydb.Table.V1.TableService.BeginTransaction
   */
  beginTransaction: {
    methodKind: "unary";
    input: typeof BeginTransactionRequestSchema;
    output: typeof BeginTransactionResponseSchema;
  },
  /**
   * Commits specified active transaction.
   *
   * @generated from rpc Ydb.Table.V1.TableService.CommitTransaction
   */
  commitTransaction: {
    methodKind: "unary";
    input: typeof CommitTransactionRequestSchema;
    output: typeof CommitTransactionResponseSchema;
  },
  /**
   * Performs a rollback of the specified active transaction.
   *
   * @generated from rpc Ydb.Table.V1.TableService.RollbackTransaction
   */
  rollbackTransaction: {
    methodKind: "unary";
    input: typeof RollbackTransactionRequestSchema;
    output: typeof RollbackTransactionResponseSchema;
  },
  /**
   * Describe supported table options.
   *
   * @generated from rpc Ydb.Table.V1.TableService.DescribeTableOptions
   */
  describeTableOptions: {
    methodKind: "unary";
    input: typeof DescribeTableOptionsRequestSchema;
    output: typeof DescribeTableOptionsResponseSchema;
  },
  /**
   * Streaming read table
   *
   * @generated from rpc Ydb.Table.V1.TableService.StreamReadTable
   */
  streamReadTable: {
    methodKind: "server_streaming";
    input: typeof ReadTableRequestSchema;
    output: typeof ReadTableResponseSchema;
  },
  /**
   * Reads specified keys non-transactionally from a single table
   *
   * @generated from rpc Ydb.Table.V1.TableService.ReadRows
   */
  readRows: {
    methodKind: "unary";
    input: typeof ReadRowsRequestSchema;
    output: typeof ReadRowsResponseSchema;
  },
  /**
   * Upserts a batch of rows non-transactionally.
   * Returns success only when all rows were successfully upserted. In case of an error some rows might
   * be upserted and some might not.
   *
   * @generated from rpc Ydb.Table.V1.TableService.BulkUpsert
   */
  bulkUpsert: {
    methodKind: "unary";
    input: typeof BulkUpsertRequestSchema;
    output: typeof BulkUpsertResponseSchema;
  },
  /**
   * Executes scan query with streaming result.
   *
   * @generated from rpc Ydb.Table.V1.TableService.StreamExecuteScanQuery
   */
  streamExecuteScanQuery: {
    methodKind: "server_streaming";
    input: typeof ExecuteScanQueryRequestSchema;
    output: typeof ExecuteScanQueryPartialResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_ydb_table_v1, 0);

