// @generated by protoc-gen-nice-grpc v1 with parameter "target=ts,import_extension=js"
// @generated from file ydb_operation_v1.proto (package Ydb.Operation.V1, syntax proto3)
/* eslint-disable */

import type { MessageInitShape } from "@bufbuild/protobuf";
import { create, fromBinary, toBinary } from "@bufbuild/protobuf";
import { CancelOperationRequestSchema, CancelOperationResponseSchema, ForgetOperationRequestSchema, ForgetOperationResponseSchema, GetOperationRequestSchema, GetOperationResponseSchema, ListOperationsRequestSchema, ListOperationsResponseSchema } from "./protos/ydb_operation_pb.js";
import type { ServiceDefinition } from "nice-grpc";

/**
 * @generated from service Ydb.Operation.V1.OperationService
 */
export const OperationServiceDefinition = {
  /**
   * Check status for a given operation.
   *
   * @generated from rpc Ydb.Operation.V1.OperationService.GetOperation
   */
  getOperation: {
    path: "/Ydb.Operation.V1.OperationService/GetOperation",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof GetOperationRequestSchema>) => toBinary(GetOperationRequestSchema, create(GetOperationRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(GetOperationRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof GetOperationResponseSchema>) => toBinary(GetOperationResponseSchema, create(GetOperationResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(GetOperationResponseSchema,bytes),
    options: {},
  },
  /**
   * Starts cancellation of a long-running operation,
   * Clients can use GetOperation to check whether the cancellation succeeded
   * or whether the operation completed despite cancellation.
   *
   * @generated from rpc Ydb.Operation.V1.OperationService.CancelOperation
   */
  cancelOperation: {
    path: "/Ydb.Operation.V1.OperationService/CancelOperation",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof CancelOperationRequestSchema>) => toBinary(CancelOperationRequestSchema, create(CancelOperationRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(CancelOperationRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof CancelOperationResponseSchema>) => toBinary(CancelOperationResponseSchema, create(CancelOperationResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(CancelOperationResponseSchema,bytes),
    options: {},
  },
  /**
   * Forgets long-running operation. It does not cancel the operation and returns
   * an error if operation was not completed.
   *
   * @generated from rpc Ydb.Operation.V1.OperationService.ForgetOperation
   */
  forgetOperation: {
    path: "/Ydb.Operation.V1.OperationService/ForgetOperation",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ForgetOperationRequestSchema>) => toBinary(ForgetOperationRequestSchema, create(ForgetOperationRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ForgetOperationRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ForgetOperationResponseSchema>) => toBinary(ForgetOperationResponseSchema, create(ForgetOperationResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ForgetOperationResponseSchema,bytes),
    options: {},
  },
  /**
   * Lists operations that match the specified filter in the request.
   *
   * @generated from rpc Ydb.Operation.V1.OperationService.ListOperations
   */
  listOperations: {
    path: "/Ydb.Operation.V1.OperationService/ListOperations",
    requestStream: false,
    requestSerialize: (message: MessageInitShape<typeof ListOperationsRequestSchema>) => toBinary(ListOperationsRequestSchema, create(ListOperationsRequestSchema, message)),
    requestDeserialize: (bytes: Uint8Array) => fromBinary(ListOperationsRequestSchema,bytes),
      responseStream: false, 
    responseSerialize: (message: MessageInitShape<typeof ListOperationsResponseSchema>) => toBinary(ListOperationsResponseSchema, create(ListOperationsResponseSchema, message)),
    responseDeserialize: (bytes: Uint8Array) => fromBinary(ListOperationsResponseSchema,bytes),
    options: {},
  },
} as const satisfies ServiceDefinition
//@ts-expect-error
OperationServiceDefinition["name"] = "OperationService";
//@ts-expect-error
OperationServiceDefinition["fullName"] = "Ydb.Operation.V1.OperationService";
